git config
git init
git add
git reset HEAD <file>
git status
git commit/git commit -a -m 'sth'
git pull
git push [remote] [branch]
git rm [-f]
git log -p -2/git log -<n>/git log --state/git log --pretty=oneline/git log --pretty=format:"%h - %an, %ar : %s"/git log --since=2.weeks
git log [--author --since --before --no-merges]
git commit --amend //补充提交
git checkout 撤销文件修改
git remote [-v]
git fetch [remote name] [branch]
git remote [show rname] [rename from to] [rm rname]
git tag [-l <pattern>]
git push [branch] [tagname]
git push --tags //推送所有不在远程仓库上的标签
git checkout -b [branch] [tagname] //在指定标签上创建新分支，因为不能检出一个标签
git config --global alias.co checkout //别名例1
git config --global alias.unstage 'reset HEAD --' //别名例2
git branch testing //创建分支
git log --oneline --decorate //查看分支
git log --oneline --decorate --graph --all //查看分叉历史
git branch -d [branch] //删除分支
git push origin --delete [branch] //删除远程分支
git merge [branch] //将目标分支合并至当前分支
git branch [-v] //查看所有分支 [显示最后一次提交的信息]
git branch --merged/--no-merged //查看已合并到当前分支的分支
git ls-remote //远程引用完整列表
git push --set-upstream [origin] [testing] //设置远程对应分支，可以直接调用
如何避免每次输入密码
如果你正在使用 HTTPS URL 来推送，Git 服务器会询问用户名与密码。 默认情况下它会在终端中提示服务器是否允许你进行推送。
如果不想在每一次推送时都输入用户名与密码，你可以设置一个 “credential cache”。 最简单的方式就是将其保存在内存中几分钟，可以简单地运行 git config --global credential.helper cache 来设置它。
想要了解更多关于不同验证缓存的可用选项，查看 凭证存储。
git pull = git fetch + git merge
git checkout --track origin/[branch] //跟踪远程分支，Pull目标
==========
设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支,你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置
git branch -u [repo]/[branch]
上游快捷方式
当设置好跟踪分支后，可以通过 @{upstream} 或 @{u} 快捷方式来引用它。 所以在 master 分支时并且它正在跟踪 origin/master 时，如果愿意的话可以使用 git merge @{u} 来取代 git merge origin/master。
==========
git branch -vv //查看设置的所有跟踪分支
git rebase [branch] //变基
